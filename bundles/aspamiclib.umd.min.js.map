{"version":3,"sources":["ng://aspamiclib/mic/mic.component.ts","ng://aspamiclib/lib.module.ts"],"names":["activeSTT","speech","require","SpeechToText","watsonTokenUrl","MicComponent","this","apiURL","imageSrc","micResult","EventEmitter","prototype","startListening","isSupported","listen","alert","stopListening","finalText","console","log","stop","that","onStart","onResult","e","text","isFinal","emit","onError","onEnd","Component","args","selector","template","Input","Output","AspaMicModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"8TAMIA,EAHAC,EAAS,IADAC,QAAQ,mCACGC,cAAa,CACnCC,eAAgB,yBAIlBC,EAAA,WAAA,SAAAA,IAOWC,KAAAC,OAAiB,GACjBD,KAAAE,SAAmB,GAClBF,KAAAG,UAA+B,IAAIC,EAAAA,aA2C/C,OAzCEL,EAAAM,UAAAC,eAAA,WACMZ,IAEOC,EAAOY,YAChBP,KAAKQ,SAELC,MAAM,0CAIVV,EAAAM,UAAAK,cAAA,SAAcC,GACZC,QAAQC,IAAI,QACZD,QAAQC,IAAIF,GACRjB,IACFA,EAAUoB,OACVpB,EAAY,OAGhBK,EAAAM,UAAAG,OAAA,eACMO,EAAOf,KACXN,EAAYC,EAAOa,OAAO,CACxBQ,QAAO,WACLJ,QAAQC,IAAI,aAEdI,SAAQ,SAAYC,GAClBN,QAAQC,IAAIK,EAAEC,MAEVD,EAAEE,UACJL,EAAKZ,UAAUkB,KAAKH,EAAEC,MACtBJ,EAAKL,cAAcQ,EAAEC,QAGzBG,QAAO,SAAYJ,GACjBN,QAAQC,IAAI,QAASK,IAEvBK,MAAK,SAAYL,GACfN,QAAQC,IAAI,MAAOK,2BA/C1BM,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,UACVC,SAAU,0PAKTC,EAAAA,wBACAA,EAAAA,yBACAC,EAAAA,UA2CH9B,EApDA,GCHA+B,EAAA,WAAA,SAAAA,KAsBA,OATgBA,EAAAC,QAAd,WAEE,MAAO,CACLC,SAAUF,EACVG,UAAW,yBAjBhBC,EAAAA,SAAQT,KAAA,CAAC,CACRU,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZtC,GAEFuC,QAAS,CACPvC,OAcJ+B,EAtBA","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nvar Speech = require('watson-html5-speech-recognition');\nvar speech = new Speech.SpeechToText({\n  watsonTokenUrl: `/api/speech-to-text/`\n});\nvar activeSTT;\n\n@Component({\n  selector: 'aspamic',\n  template: `<a (click)=\"startListening()\" class=\"micSize\" [style.background]=\"'url(' + imageSrc + ')'\" style=\"cursor: pointer;\" title=\"Listen\"> </a>`,\n  styleUrls: ['./mic.component.scss']\n})\nexport class MicComponent {\n\n  @Input() apiURL: string = '';\n  @Input() imageSrc: string = '';\n  @Output() micResult: EventEmitter<any> = new EventEmitter<any>();\n\n  startListening() {\n    if (activeSTT) {\n      // do nothing, speech is active\n    } else if (speech.isSupported) {\n      this.listen();\n    } else {\n      alert('speech not supported by this browser');\n    }\n  }\n\n  stopListening(finalText) {\n    console.log('stop');\n    console.log(finalText);\n    if (activeSTT) {\n      activeSTT.stop();\n      activeSTT = null;\n    }\n  }\n  listen() {\n    var that = this;\n    activeSTT = speech.listen({\n      onStart: function () {\n        console.log('starting');\n      },\n      onResult: function (e) {\n        console.log(e.text);\n        // document.getElementById(\"recognizedText\").innerHTML = e.text;\n        if (e.isFinal) {\n          that.micResult.emit(e.text);\n          that.stopListening(e.text);\n        }\n      },\n      onError: function (e) {\n        console.log('error', e);\n      },\n      onEnd: function (e) {\n        console.log('end', e);\n      }\n    });\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MicComponent } from './mic/mic.component';\n// import { BarService } from './bar/bar.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    MicComponent\n  ],\n  exports: [\n    MicComponent\n  ]\n})\nexport class AspaMicModule {\n\n  public static forRoot(): ModuleWithProviders {\n\n    return {\n      ngModule: AspaMicModule,\n      providers: [\n        // BarService\n      ]\n    };\n  }\n}\n"]}